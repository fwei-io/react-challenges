export default [
    { path: "/ReverseClickedBoxes", name: "Reverse Clicked Boxes", description: "Make 6 clickable boxes, change the     background color after each click. Once all boxes are clicked, automatically roll them back to the unclicked state in the same order with time delay.", thumbnails: "/images/reverse-clicked-boxes.gif", tags: ["useState", "useEffect"] },
    { path: "/AnalogClock", name: "Analog Clock", description: "Create an analog clock with hour, minute and second hands.", thumbnails: "/images/analog-clock.gif", tags: ["useState", "useEffect"] },
    { path: "/UndoRedoDots", name: "Undo Redo Dots", description: "Create a react application that allows users to click the screen and leave a dot (10px x 10px). Add an \"Undo\" button that allows users to remove the last dot. It can be clicked as many times as needed (until all dots are removed). Add a \"Redo\" button that puts the dots back on the screen. It can be clicked as many times as needed (until all dots are restored).", thumbnails: "/images/undo-redo-dots.gif", tags: ["useState"] },
    { path: "/ReactionTimeGame", name: "Reaction Time Game", description: "Make a reaction time game, click a \"Start game\" button to show a red box, set a random time (1-6 secs.) for the box to turn green. When the green box is clicked, show the reaction time at the bottom - \"You took ___ms!\". If the red box is clicked, show \"You clicked too early!\"", thumbnails: "/images/reaction-time-game.gif", tags: ["useState"] },
    { path: "/TimerOne", name: "Timer One", description: "Make a timer that shows minutes and seconds, add Start, Stop and Reset buttons.", thumbnails: "/images/timer-one.gif", tags: ["useState", "useEffect"] },
    { path: "/TimerTwo", name: "Timer Two", description: "Make a simple timer that shows minutes and seconds - 00:00.", thumbnails: "/images/timer-two.gif", tags: ["useState", "useEffect"] },
    { path: "/ToDoListReducer", name: "To Do List", description: "Create a todo list using useReducer, implement Add, Update and Remove functions. Each list must have 5 minimum characters.", thumbnails: "/images/todo-list-reducer.gif", tags: ["useReducer"] },
    { path: "/TodoListTwo", name: "Todo List Two", description: "Create a todo list component with useState, provide a text field to input todo. We need '+' (add todo list) button, 'Edit' button next to individual todo list (edit list inline and press enter to update), 'X' button next to edit button. User can click on individual todo list to mark done (font strikethrough).", thumbnails: "/images/todo-list-two.gif", tags: ["useState", "useEffect"] },
    { path: "/RatingsUseContextUseReducer", name: "Ratings", description: "Make a restaurant filters (5 ⭐️ rating, $$$ price, reset filters) using useContext & useReducer.", thumbnails: "/images/ratings-usecontext-usereducer.gif", tags: ["useState", "useContext", "useReducer"] },
    { path: "/SignUpFormOne", name: "Sign Up Form", description: "Create a simple Sign Up form that validate first name, last name, email address, password (min 7 characters), confirm password. Show errors when the information is missing or incorrect.", thumbnails: "/images/sign-up-form-one.gif", tags: ["useState", "useEffect"] },
    { path: "/MonkeyType", name: "Monkey Type", description: "Create a typing game that is similar to MonkeyType.  Users are presented with a paragraph of text 25 words long. Words will be pulled from the wordList, without duplicating a word for each paragraph. When a letter is typed on the keyboard it will change the corresponding letter color on the screen (yellow if the letter is correct, red if incorrect). Pressing backspace will erase the last typed letter. Any typed key that is not 'a-z' and space will not be registered. At the end of the game, allow the user to see how many words per minute they typed.", thumbnails: "/images/monkey-type.gif", tags: ["useState", "useEffect"] },
    { path: "/RestfulFetchPerson", name: "Restful Fetch Person", description: "Use https://randomuser.me/api to fetch a person info, show picture and name, add a button to load and append more person.", thumbnails: "/images/restful-fetch-person.gif", tags: ["useState", "useEffect"] },
    { path: "/ChangeThemeUseContext", name: "Change Theme", description: "Create a component with two buttons (Light, Dark) and a paragraph of text. Clicking on the buttons will toggle between light and dark theme throughout the page using React useContext hook.", thumbnails: "/images/change-theme.gif", tags: ["useState", "useContext"] },
    { path: "/ChangeLanguageUseContext", name: "Change Language", description: "Create a useContect component with three buttons (EN, ES, FR) to display a few words in different languages. Clicking on the buttons will toggle between English, Spanish and French.", thumbnails: "/images/change-language.gif", tags: ["useState", "useContext"] },
    { path: "/FilteringUseMemo", name: "Filter List", description: "You have a list of products and want to filter them based on a search term. Filtering a long list is an expensive operation, we don't want to refilter the list every time the component re-renders, we only want to refilter when the list of products or the search term changes.", thumbnails: "/images/filtering-usememo.gif", tags: [ "useMemo","useState"] },
    { path: "/SortListUseMemo", name: "Sort Large List", description: "Create a large (1,000) list of random usernames and sort them in ascending or descending order. Use useMemo hook to improve the sorting.", thumbnails: "/images/sort-list-usememo.gif", tags: ["useMemo", "useState"] },
    { path: "/ArrayUseReducer", name: "Array Functions", description: "Use useReducer hook to combine 4 array utility functions: map (element multiply by 2), reduce (sum up all elements), fiter (element > 5), flat (flatten one-level nested array). Allow user to type their own array in a textarea and show the final results.", thumbnails: "/images/array-usereducer.gif", tags: ["useReducer"] },
    { path: "/FormUseRef", name: "Autofocus Form", description: "Use useRef hook to autofocus on an input right after the form is submitted.", thumbnails: "/images/form-useref.gif", tags: ["useRef"] },
    { path: "/InfiniteScrollUseRefUseCallback", name: "Infinite Scroll", description: "Implement infinite scroll (1000 items) using useCallback, useRef.", thumbnails: "/images/infinite-scroll-useref-usecallback.gif", tags: ["useCallback", "useRef"] },
    { path: "/ChartJSDemo", name: "ChartJS Demo", description: "Implement ChartJS charts, you can generate fake data.", thumbnails: "/images/chartjs-demo.gif", tags: ["ChartJS"] },
]